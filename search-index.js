var searchIndex = JSON.parse('{\
"libaidokuln":{"doc":"libaidokuln","t":[12,12,12,12,12,3,3,3,3,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,3,0,0,11,11,11,11,11,12,11,11,0,0,12,11,0,0,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],"n":["0","0","1","1","2","BitmapPixel","ImageOptions","Padding","Spliterated","background_color","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","break_apart","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constant_width","default","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fonts","from","from","from","from","into","into","into","into","lines","ne","ne","ne","ne","padding","split","text_color","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","width","width","write_text","Font","arial","atkinson","borrow","borrow_mut","clone","clone_into","fmt","font","from","from_name","fs_brabo","georgia","height","into","palatino","times","to_owned","try_from","try_into","type_id","ARIAL18","ARIAL24","ARIAL30","ARIAL36","ATKINSON18","ATKINSON24","ATKINSON30","ATKINSON36","FS_BRABO18","FS_BRABO24","FS_BRABO30","FS_BRABO36","GEORGIA18","GEORGIA24","GEORGIA30","GEORGIA36","PALATINO18","PALATINO24","PALATINO30","PALATINO36","TIMES18","TIMES24","TIMES30","TIMES36"],"q":["libaidokuln","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","libaidokuln::fonts","","","","","","","","","","","","","","","","","","","","","libaidokuln::fonts::arial","","","","libaidokuln::fonts::atkinson","","","","libaidokuln::fonts::fs_brabo","","","","libaidokuln::fonts::georgia","","","","libaidokuln::fonts::palatino","","","","libaidokuln::fonts::times","","",""],"d":["The horizontal padding.","","The vertical padding.","","","","Rendering options.","Struct representing text padding, used to tell the library …","Struct representing split text.","Background color. Can be written in an BGR-like format …","","","","","","","","","Split the text into multiple lines based on a given …","","","","","","","","","Whether the renderer should force the given max width or …","","","","","","","","","","Module containing a few built-in fonts for text rendering.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The number of lines in a given page.","","","","","The margins for the generated page.","The split text.","Text color. It is an usize, but can be written in an …","","","","","","","","","","","","","","","","","Maximum page width.","The maximum width of the split text.","Turns text into a 3-dimensional array containing the color …","","","","","","","","","","Returns the argument unchanged.","Get a font from its name.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[6,7,6,7,7,0,0,0,0,8,6,7,8,5,6,7,8,5,0,6,7,8,5,6,7,8,5,8,8,6,7,8,5,6,7,8,5,0,6,7,8,5,6,7,8,5,8,6,7,8,5,8,5,8,6,7,8,5,6,7,8,5,6,7,8,5,6,7,8,5,8,5,0,0,0,0,4,4,4,4,4,4,4,4,0,0,4,4,0,0,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]],3,4],5],[6,6],[7,7],[8,8],[5,5],[[]],[[]],[[]],[[]],0,[[],8],[[6,6],9],[[7,7],9],[[8,8],9],[[5,5],9],[[6,10],11],[[7,10],11],[[8,10],11],[[5,10],11],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[6,6],9],[[7,7],9],[[8,8],9],[[5,5],9],0,0,0,[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],0,0,[[[2,[1]],14,4,8],[[16,[15]]]],0,0,0,[[]],[[]],[4,4],[[]],[[4,10],11],0,[[]],[[[2,[1]]],4],0,0,0,[[]],0,0,[[]],[[],12],[[],12],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[15,"str"],[8,"AsRef"],[15,"f32"],[3,"Font"],[3,"Spliterated"],[3,"Padding"],[3,"BitmapPixel"],[3,"ImageOptions"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[15,"usize"],[15,"u8"],[3,"Vec"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
